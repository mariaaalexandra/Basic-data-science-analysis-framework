Druga Maria-Alexandra
323CB


Task 1
Tsort Function 
|->find_nr_of_column list string = finds the number of the column with the title indicated by the 
                                string.
|->int_format = convert a string variable to int variable
|->cmp_el l1 l2 ind = compare values on the position of ind and in case of equality compare the values
                    on the first position.
|-> tsort column table = adds the columns' names and the rest of the table sorted by the column's name

Task 2
Vunion Function
|->verify t1 t2 = checks if lists t1 and t2 containing String values are the same, the function returns 0
                if lists t1 and t2 are the same, 1 otherwise
|->vunion t1 t2 = adds rows of table t2 to table t1 if the first line of both tables is the same

Task 3
Hunion Function
|->count_elements t = calculate the number of elements of a table/list
|->create_empty line = creates a row using "" for the number of elements of the line
There are two cases: --- when first table > second table
                     --- when second table < first table
For both cases there are two functions:
|->create_empty_Case = completes the smaller tabel with rows containing only ""
|->create_new_Case = create the whole table merging the two tables

|->vunion t1 t2 = uses one of the above functions depending on the dimension of the tables

Task4 
Tjoin Function
|->exists_value = verifies if the value of the key_column exists in the second table 
                function returns line if exists, [] otherwise
|->columns_names = creates the first row of the final table, the one containing the columns' names
|->exists_col = verifies if a column exists in a row
                function returns True if it exits, False otherwise
|->cmp_values = compares values for the columns with the same names
                if only one column contains the value then that's the kept value, with the exception of "" 
                otherwise if both columns contain the value then the kept value is the one in the second table
|->create_one = create one line of the table according to the line 
                merges one line from the first table with one from the other one
|->merge_many =  merges one line from the first with the searched line from table two
|->merge_every = merges every line from the first with the searched line from table two
|->tjoin = appends the columns' names to the final merged table
Task 5
Cartesian Function
|->cartesian_one_to_one fun t1 t2 = merge first line of the first table with the first line of the second
                                  table.
|->cartesian_one_to_many fun t1 t2 = merge fist line from the first table with all the lines from the second
                                   table.
|->cartesian_many_to_many fun t1 t2 = merge every line from the first table with all the lines from the second
                                    table.
|->cartesian new_row_function new_column_names t1 t2 = appends the columns of names to the cartesian table.

Task 6
Projection Function
|->ind listStr listTab = returns a list containing the indexes of the columns that must be extracted
|->new_list listStr listIndex = takes from a list only the columns with the index placed in the listIndex list
|->new_table table listIndex = applies the function new_list for eacj line from the table
|->projection columns_to_extract t = applies new_table function using the list of indexes generated by 
                                   columns_to_extract

Task 7
FilterTable Function
|->verif_cond_line line column cond = verify if a row respects the given condition
|->condition_table column table cond = adds all the rows from the table that respect the condition for the column
                                    with the given index
|->filterTable condition key_column t = creates the table with the rows that respects the condition for the indicated
                                      column
